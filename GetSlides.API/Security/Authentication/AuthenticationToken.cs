using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Security.Cryptography;

namespace GetSlides.API
{
    /// <summary>
    /// AuthenticationToken is a class which represents a token generated by the server to be used by a specific user.
    /// </summary>
    public class AuthenticationToken
    {
        string _token;
        public string Token { get { return this._token; } }

        public AuthenticationToken(string email) 
        {
            this._token = Hash.CreateHash(email + DateTime.Now.ToString());
        }

        /// <summary>
        /// Authenticate is a static function in the AuthenticationToken class used for authenticating the user through a token string.
        /// </summary>
        /// <returns>Return types vary depending on the situation but the method will return either a boolean value or a new AuthenticationToken.</returns>
        public static object Authenticate(string token, string guidHash)
        {
            BLL.AuthTokenRepository authRepo = new BLL.AuthTokenRepository();
            BLL.AuthToken baseToken = authRepo.Select(guidHash);

            // Checks if the date today had passed the date until the token was valid.
            if (baseToken.StartDateTime.Date.AddDays((double)baseToken.Timespan) < DateTime.Today)
            {
                // Checks if less than 20 days had passed since the token expiration date.
                if (baseToken.StartDateTime.Date.AddDays((double)baseToken.Timespan) > DateTime.Today.Subtract(TimeSpan.FromDays(20)))
                {
                    BLL.UserRepository userRep = new BLL.UserRepository();
                    // Checks if this was the latest token generated.
                    if (userRep.GetLatestToken(userRep.Select(baseToken.ID)).Token == baseToken.Token)
                        return new AuthenticationToken(userRep.Select(baseToken.ID).Email);
                    else
                        return false;
                }
                else
                    return false;
            }
            else
                return true;
            }  
           
        
    }
}